source_file: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT CONSTRUCTOR CONTENT TEXT YEAR
##
## Ends in an error in state: 343.
##
## list(enum_decl_line) -> enum_decl_line . list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## enum_decl_line
##

expected another enum case, or a new declaration or scope use

source_file: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT CONSTRUCTOR CONTENT YEAR
##
## Ends in an error in state: 338.
##
## enum_decl_line_payload -> CONTENT . typ [ SCOPE END_CODE DECLARATION ALT ]
##
## The known suffix of the stack is as follows:
## CONTENT
##

expected a content type

source_file: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT CONSTRUCTOR YEAR
##
## Ends in an error in state: 337.
##
## enum_decl_line -> ALT constructor . option(enum_decl_line_payload) [ SCOPE END_CODE DECLARATION ALT ]
##
## The known suffix of the stack is as follows:
## ALT constructor
##

expected a payload for your enum case, or another case or declaration

source_file: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON ALT YEAR
##
## Ends in an error in state: 336.
##
## enum_decl_line -> ALT . constructor option(enum_decl_line_payload) [ SCOPE END_CODE DECLARATION ALT ]
##
## The known suffix of the stack is as follows:
## ALT
##

expected the name of an enum case

source_file: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 335.
##
## code_item -> DECLARATION ENUM constructor COLON . list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION ENUM constructor COLON
##

expected an enum case

source_file: BEGIN_CODE DECLARATION ENUM CONSTRUCTOR YEAR
##
## Ends in an error in state: 334.
##
## code_item -> DECLARATION ENUM constructor . COLON list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION ENUM constructor
##

expected a colon

source_file: BEGIN_CODE DECLARATION ENUM YEAR
##
## Ends in an error in state: 333.
##
## code_item -> DECLARATION ENUM . constructor COLON list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION ENUM
##

expected the name of your enum








source_file: BEGIN_CODE DECLARATION SCOPE CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 308.
##
## code_item -> DECLARATION SCOPE constructor COLON . nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION SCOPE constructor COLON
##

expected a context item introduced by "context"

source_file: BEGIN_CODE DECLARATION SCOPE CONSTRUCTOR YEAR
##
## Ends in an error in state: 307.
##
## code_item -> DECLARATION SCOPE constructor . COLON nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION SCOPE constructor
##

expected a colon followed by the list of context items of this scope

source_file: BEGIN_CODE DECLARATION SCOPE YEAR
##
## Ends in an error in state: 306.
##
## code_item -> DECLARATION SCOPE . constructor COLON nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION SCOPE
##

expected the name of the scope you are declaring

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS COLLECTION YEAR
##
## Ends in an error in state: 293.
##
## typ -> collection_marked . typ [ STATE SCOPE OUTPUT INTERNAL INPUT IDENT END_CODE DEPENDS DECLARATION DATA CONTEXT CONDITION ALT ]
##
## The known suffix of the stack is as follows:
## collection_marked
##

expected a new struct data, or another declaration or scope use

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS TEXT YEAR
##
## Ends in an error in state: 301.
##
## list(struct_scope) -> struct_scope . list(struct_scope) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## struct_scope
##

expected a new struct data, or another declaration or scope use

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT DEPENDS YEAR
##
## Ends in an error in state: 297.
##
## struct_scope_func -> DEPENDS . typ [ STATE SCOPE OUTPUT INTERNAL INPUT IDENT END_CODE DECLARATION DATA CONTEXT CONDITION ]
##
## The known suffix of the stack is as follows:
## DEPENDS
##

expected the type of the parameter of this struct data function

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION IDENT YEAR
##
## Ends in an error in state: 296.
##
## struct_scope -> struct_scope_base . option(struct_scope_func) [ SCOPE END_CODE DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## struct_scope_base
##

expected a new struct data, or another declaration or scope use

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON CONDITION YEAR
##
## Ends in an error in state: 303.
##
## struct_scope_base -> condition_pos . ident [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## condition_pos
##

expected the name of this struct condition

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON DATA IDENT CONTENT YEAR
##
## Ends in an error in state: 289.
##
## struct_scope_base -> DATA ident CONTENT . typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## DATA ident CONTENT
##

expected the type of this struct data

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON DATA IDENT YEAR
##
## Ends in an error in state: 288.
##
## struct_scope_base -> DATA ident . CONTENT typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## DATA ident
##

expected the type of this struct data, introduced by the content keyword

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON DATA YEAR
##
## Ends in an error in state: 287.
##
## struct_scope_base -> DATA . ident CONTENT typ [ SCOPE END_CODE DEPENDS DECLARATION DATA CONDITION ]
##
## The known suffix of the stack is as follows:
## DATA
##

expected the name of this struct data

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 286.
##
## code_item -> DECLARATION STRUCT constructor COLON . list(struct_scope) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION STRUCT constructor COLON
##

expected struct data or condition

source_file: BEGIN_CODE DECLARATION STRUCT CONSTRUCTOR YEAR
##
## Ends in an error in state: 285.
##
## code_item -> DECLARATION STRUCT constructor . COLON list(struct_scope) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION STRUCT constructor
##

expected a colon

source_file: BEGIN_CODE DECLARATION STRUCT YEAR
##
## Ends in an error in state: 284.
##
## code_item -> DECLARATION STRUCT . constructor COLON list(struct_scope) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION STRUCT
##

expected the struct name

source_file: BEGIN_CODE DECLARATION YEAR
##
## Ends in an error in state: 283.
##
## code_item -> DECLARATION . STRUCT constructor COLON list(struct_scope) [ SCOPE END_CODE DECLARATION ]
## code_item -> DECLARATION . SCOPE constructor COLON nonempty_list(scope_decl_item) [ SCOPE END_CODE DECLARATION ]
## code_item -> DECLARATION . ENUM constructor COLON list(enum_decl_line) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## DECLARATION
##

expected the kind of the declaration (struct, scope or enum)

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION CARDINAL THEN
##
## Ends in an error in state: 248.
##
## nonempty_list(scope_item) -> scope_item . [ SCOPE END_CODE DECLARATION ]
## nonempty_list(scope_item) -> scope_item . nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## scope_item
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 162, spurious reduction of production let_expression -> logical_expression
## In state 172, spurious reduction of production expression -> let_expression
## In state 242, spurious reduction of production assertion_base -> expression
## In state 243, spurious reduction of production assertion -> option(condition_consequence) assertion_base
## In state 247, spurious reduction of production scope_item -> ASSERTION assertion
##

expected a new scope use item

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION FIXED IDENT BY YEAR
##
## Ends in an error in state: 239.
##
## assertion -> FIXED qident BY . ident [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## FIXED qident BY
##

expected the legislative text by which the value of the variable is fixed

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION FIXED IDENT WITH_V
##
## Ends in an error in state: 238.
##
## assertion -> FIXED qident . BY ident [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## FIXED qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production separated_nonempty_list(DOT,ident) -> ident
## In state 224, spurious reduction of production qident -> separated_nonempty_list(DOT,ident)
##

expected the legislative text by which the value of the variable is fixed

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION FIXED YEAR
##
## Ends in an error in state: 237.
##
## assertion -> FIXED . qident BY ident [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## FIXED
##

expected the name of the variable that should be fixed


source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION UNDER_CONDITION TRUE THEN
##
## Ends in an error in state: 245.
##
## condition_consequence -> condition . CONSEQUENCE [ VERTICAL TRUE SUM STATE OUTPUT NOT MONEY_AMOUNT MONEY MINUS MINIMUM MAXIMUM MATCH LSQUARE LPAREN LET INT_LITERAL IF IDENT FOR FILLED FALSE EXISTS DEFINED_AS DECIMAL_LITERAL DECIMAL CONSTRUCTOR CARDINAL ]
##
## The known suffix of the stack is as follows:
## condition
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 162, spurious reduction of production let_expression -> logical_expression
## In state 172, spurious reduction of production expression -> let_expression
## In state 236, spurious reduction of production condition -> UNDER_CONDITION expression
##

expected a consequence for this definition under condition

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION UNDER_CONDITION YEAR
##
## Ends in an error in state: 235.
##
## condition -> UNDER_CONDITION . expression [ CONSEQUENCE ]
##
## The known suffix of the stack is as follows:
## UNDER_CONDITION
##

expected an expression for this condition

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION VARIES IDENT UNDER_CONDITION
##
## Ends in an error in state: 225.
##
## assertion -> VARIES qident . WITH_V base_expression option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production separated_nonempty_list(DOT,ident) -> ident
## In state 224, spurious reduction of production qident -> separated_nonempty_list(DOT,ident)
##

expected an indication about what this variable varies with

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION VARIES IDENT WITH_V TRUE XOR
##
## Ends in an error in state: 227.
##
## assertion -> VARIES qident WITH_V base_expression . option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES qident WITH_V base_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
##

expected an indication about the variation sense of the variable, or a new scope item

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION VARIES IDENT WITH_V YEAR
##
## Ends in an error in state: 226.
##
## assertion -> VARIES qident WITH_V . base_expression option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES qident WITH_V
##

the variable varies with an expression that was expected here

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION VARIES YEAR
##
## Ends in an error in state: 223.
##
## assertion -> VARIES . qident WITH_V base_expression option(variation_type) [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## VARIES
##

expecting the name of the varying variable

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON ASSERTION YEAR
##
## Ends in an error in state: 222.
##
## scope_item -> ASSERTION . assertion [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## ASSERTION
##

expected an expression that shoud be asserted during execution

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON DEFINITION IDENT DEFINED_AS YEAR
##
## Ends in an error in state: 276.
##
## definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(state) option(condition_consequence) DEFINED_AS . expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to) DEFINITION qident option(definition_parameters) option(state) option(condition_consequence) DEFINED_AS
##

expected an expression for the definition

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON DEFINITION IDENT OF IDENT DECREASING
##
## Ends in an error in state: 273.
##
## definition -> option(label) option(exception_to) DEFINITION qident option(definition_parameters) . option(state) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to) DEFINITION qident option(definition_parameters)
##

expected a expression for defining this function, introduced by the defined as keyword


source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON DEFINITION IDENT WITH_V
##
## Ends in an error in state: 272.
##
## definition -> option(label) option(exception_to) DEFINITION qident . option(definition_parameters) option(state) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to) DEFINITION qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production separated_nonempty_list(DOT,ident) -> ident
## In state 224, spurious reduction of production qident -> separated_nonempty_list(DOT,ident)
##

expected the defined as keyword to introduce the definition of this variable

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON DEFINITION YEAR
##
## Ends in an error in state: 271.
##
## definition -> option(label) option(exception_to) DEFINITION . qident option(definition_parameters) option(state) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to) DEFINITION
##

expected the name of the variable you want to define

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON EXCEPTION IDENT YEAR
##
## Ends in an error in state: 254.
##
## definition -> option(label) option(exception_to) . DEFINITION qident option(definition_parameters) option(state) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## rule -> option(label) option(exception_to) . RULE rule_expr option(condition_consequence) option(state) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to)
##

expected a rule or a definition after the exception declaration

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON EXCEPTION YEAR
##
## Ends in an error in state: 251.
##
## exception_to -> EXCEPTION . option(ident) [ RULE DEFINITION ]
##
## The known suffix of the stack is as follows:
## EXCEPTION
##

expected the label to which the exception is referring back

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON LABEL IDENT DEFINED_AS
##
## Ends in an error in state: 250.
##
## definition -> option(label) . option(exception_to) DEFINITION qident option(definition_parameters) option(state) option(condition_consequence) DEFINED_AS expression [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
## rule -> option(label) . option(exception_to) RULE rule_expr option(condition_consequence) option(state) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label)
##

expected a rule or a definition after the label declaration

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON LABEL YEAR
##
## Ends in an error in state: 220.
##
## label -> LABEL . ident [ RULE EXCEPTION DEFINITION ]
##
## The known suffix of the stack is as follows:
## LABEL
##

expected the name of the label

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE IDENT DOT YEAR
##
## Ends in an error in state: 233.
##
## separated_nonempty_list(DOT,ident) -> ident DOT . separated_nonempty_list(DOT,ident) [ WITH_V UNDER_CONDITION STATE OF NOT FILLED DEFINED_AS BY ]
##
## The known suffix of the stack is as follows:
## ident DOT
##

expected a struct field or a sub-scope context item after the dot

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE IDENT NOT FALSE
##
## Ends in an error in state: 264.
##
## rule_consequence -> option(NOT) . FILLED [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(NOT)
##

expected the filled keyword the this rule

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE IDENT OF IDENT YEAR
##
## Ends in an error in state: 256.
##
## rule -> option(label) option(exception_to) RULE rule_expr . option(condition_consequence) option(state) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to) RULE rule_expr
##

expected the expression of the rule

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE IDENT OF YEAR
##
## Ends in an error in state: 267.
##
## definition_parameters -> OF . ident [ UNDER_CONDITION STATE NOT FILLED DEFINED_AS ]
##
## The known suffix of the stack is as follows:
## OF
##

expected the name of the parameter for this dependent variable


source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE IDENT WITH_V
##
## Ends in an error in state: 266.
##
## rule_expr -> qident . option(definition_parameters) [ UNDER_CONDITION STATE NOT FILLED ]
##
## The known suffix of the stack is as follows:
## qident
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 232, spurious reduction of production separated_nonempty_list(DOT,ident) -> ident
## In state 224, spurious reduction of production qident -> separated_nonempty_list(DOT,ident)
##

expected a condition or a consequence for this rule

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE IDENT YEAR
##
## Ends in an error in state: 232.
##
## separated_nonempty_list(DOT,ident) -> ident . [ WITH_V UNDER_CONDITION STATE OF NOT FILLED DEFINED_AS BY ]
## separated_nonempty_list(DOT,ident) -> ident . DOT separated_nonempty_list(DOT,ident) [ WITH_V UNDER_CONDITION STATE OF NOT FILLED DEFINED_AS BY ]
##
## The known suffix of the stack is as follows:
## ident
##

expected a condition or a consequence for this rule, or the rest of the variable qualified name

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON RULE YEAR
##
## Ends in an error in state: 255.
##
## rule -> option(label) option(exception_to) RULE . rule_expr option(condition_consequence) option(state) rule_consequence [ SCOPE RULE LABEL EXCEPTION END_CODE DEFINITION DECLARATION ASSERTION ]
##
## The known suffix of the stack is as follows:
## option(label) option(exception_to) RULE
##

expected the name of the variable subject to the rule

source_file: BEGIN_CODE SCOPE CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 219.
##
## code_item -> SCOPE constructor option(scope_use_condition) COLON . nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## SCOPE constructor option(scope_use_condition) COLON
##

expected a scope use item: a rule, definition or assertion

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR CONTENT TRUE YEAR
##
## Ends in an error in state: 101.
##
## enum_inject_content -> CONTENT small_expression . [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
## small_expression -> small_expression . DOT option(terminated(constructor,DOT)) ident [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## CONTENT small_expression
##

the expression for the content of the enum case is already well-formed, expected an operator to form a bigger expression

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR CONTENT YEAR
##
## Ends in an error in state: 100.
##
## enum_inject_content -> CONTENT . small_expression [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## CONTENT
##

expected an expression for the content of this enum case

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR DOT CONSTRUCTOR ALL
##
## Ends in an error in state: 99.
##
## struct_or_enum_inject -> constructor option(preceded(DOT,constructor)) . option(enum_inject_content) [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## constructor option(preceded(DOT,constructor))
##

expected the rest of the path, or the content of the enum constructor

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR DOT YEAR
##
## Ends in an error in state: 72.
##
## option(preceded(DOT,constructor)) -> DOT . constructor [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTENT CONTAINS CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## DOT
##

expected the rest of the path after the dot


source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR LBRACKET ALT IDENT COLON CARDINAL THEN
##
## Ends in an error in state: 94.
##
## nonempty_list(preceded(ALT,struct_content_field)) -> ALT struct_content_field . [ RBRACKET ]
## nonempty_list(preceded(ALT,struct_content_field)) -> ALT struct_content_field . nonempty_list(preceded(ALT,struct_content_field)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ALT struct_content_field
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 209, spurious reduction of production struct_content_field -> ident COLON logical_expression
##

expected another structure field or the closing bracket

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR LBRACKET ALT IDENT COLON YEAR
##
## Ends in an error in state: 35.
##
## struct_content_field -> ident COLON . logical_expression [ RBRACKET ALT ]
##
## The known suffix of the stack is as follows:
## ident COLON
##

expected the expression for this struct field

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR LBRACKET ALT IDENT YEAR
##
## Ends in an error in state: 34.
##
## struct_content_field -> ident . COLON logical_expression [ RBRACKET ALT ]
##
## The known suffix of the stack is as follows:
## ident
##

expected a colon

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR LBRACKET ALT YEAR
##
## Ends in an error in state: 93.
##
## nonempty_list(preceded(ALT,struct_content_field)) -> ALT . struct_content_field [ RBRACKET ]
## nonempty_list(preceded(ALT,struct_content_field)) -> ALT . struct_content_field nonempty_list(preceded(ALT,struct_content_field)) [ RBRACKET ]
##
## The known suffix of the stack is as follows:
## ALT
##

expected the name of the structure field

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR LBRACKET YEAR
##
## Ends in an error in state: 92.
##
## struct_inject_content -> LBRACKET . nonempty_list(preceded(ALT,struct_content_field)) RBRACKET [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## LBRACKET
##

expected structure fields introduced by --

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION CONSTRUCTOR YEAR
##
## Ends in an error in state: 91.
##
## struct_or_enum_inject -> constructor . option(preceded(DOT,constructor)) option(enum_inject_content) [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
## struct_or_enum_inject -> constructor . struct_inject_content [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## constructor
##

expected a payload for the enum case constructor, or the rest of the expression (with an operator ?)

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION EXISTS IDENT IN CARDINAL SUCH THAT YEAR
##
## Ends in an error in state: 150.
##
## let_expression -> EXISTS ident IN compare_expression SUCH THAT . compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## EXISTS ident IN compare_expression SUCH THAT
##

expected an expression for the existential test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION EXISTS IDENT IN TRUE SUCH YEAR
##
## Ends in an error in state: 149.
##
## let_expression -> EXISTS ident IN compare_expression SUCH . THAT compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## EXISTS ident IN compare_expression SUCH
##

expected a keyword to complete the "such that" construction

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION EXISTS IDENT IN YEAR
##
## Ends in an error in state: 147.
##
## let_expression -> EXISTS ident IN . compare_expression SUCH THAT compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## EXISTS ident IN
##

expected an expression that designates the set subject to the existential test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION EXISTS IDENT YEAR
##
## Ends in an error in state: 146.
##
## let_expression -> EXISTS ident . IN compare_expression SUCH THAT compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## EXISTS ident
##

expected the "in" keyword to continue this existential test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION EXISTS YEAR
##
## Ends in an error in state: 145.
##
## let_expression -> EXISTS . ident IN compare_expression SUCH THAT compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## EXISTS
##

expected an identifier that will designate the existential witness for the test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION FOR ALL IDENT IN CARDINAL WE_HAVE YEAR
##
## Ends in an error in state: 143.
##
## let_expression -> FOR ALL ident IN compare_expression WE_HAVE . compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## FOR ALL ident IN compare_expression WE_HAVE
##

expected an expression for the universal test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION FOR ALL IDENT IN YEAR
##
## Ends in an error in state: 54.
##
## let_expression -> FOR ALL ident IN . compare_expression WE_HAVE compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## FOR ALL ident IN
##

expected the expression designating the set on which to perform the universal test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION FOR ALL IDENT YEAR
##
## Ends in an error in state: 53.
##
## let_expression -> FOR ALL ident . IN compare_expression WE_HAVE compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## FOR ALL ident
##

expected the "in" keyword for the rest of the universal test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION FOR ALL YEAR
##
## Ends in an error in state: 52.
##
## let_expression -> FOR ALL . ident IN compare_expression WE_HAVE compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## FOR ALL
##

expected an identifier for the bound variable of the universal test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION FOR YEAR
##
## Ends in an error in state: 51.
##
## let_expression -> FOR . ALL ident IN compare_expression WE_HAVE compare_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## FOR
##

expected the "all" keyword to mean the "for all" construction of the universal test

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION IF TRUE SEMICOLON
##
## Ends in an error in state: 163.
##
## let_expression -> IF let_expression . THEN let_expression ELSE let_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF let_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 162, spurious reduction of production let_expression -> logical_expression
##

expected the "then" keyword as the conditional expression is complete




source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION IF YEAR
##
## Ends in an error in state: 49.
##
## let_expression -> IF . let_expression THEN let_expression ELSE let_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## IF
##

expected an expression for the test of the conditional

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION INT_LITERAL WITH_V
##
## Ends in an error in state: 81.
##
## literal -> num_literal . option(unit_literal) [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## num_literal
##

expected a unit for this literal, or a valid operator to complete the expression

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION LPAREN TRUE THEN
##
## Ends in an error in state: 188.
##
## atomic_expression -> LPAREN expression . RPAREN [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## LPAREN expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 162, spurious reduction of production let_expression -> logical_expression
## In state 172, spurious reduction of production expression -> let_expression
##

unmatched parenthesis that should have been closed by here

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION LPAREN YEAR
##
## Ends in an error in state: 44.
##
## atomic_expression -> LPAREN . expression RPAREN [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

expected an expression inside the parenthesis


source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION LSQUARE TRUE THEN
##
## Ends in an error in state: 206.
##
## separated_nonempty_list(SEMICOLON,expression) -> expression . [ RSQUARE ]
## separated_nonempty_list(SEMICOLON,expression) -> expression . SEMICOLON separated_nonempty_list(SEMICOLON,expression) [ RSQUARE ]
##
## The known suffix of the stack is as follows:
## expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 162, spurious reduction of production let_expression -> logical_expression
## In state 172, spurious reduction of production expression -> let_expression
##

expected a semicolon or a right square bracket after the collection element

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION LSQUARE YEAR
##
## Ends in an error in state: 42.
##
## small_expression -> LSQUARE . loption(separated_nonempty_list(SEMICOLON,expression)) RSQUARE [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## LSQUARE
##

expected a collection element

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION MATCH TRUE WITH ALT CONSTRUCTOR COLON CARDINAL RBRACKET
##
## Ends in an error in state: 197.
##
## match_arms -> ALT match_arm . match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## ALT match_arm
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 201, spurious reduction of production match_arm -> constructor_binding COLON logical_expression
##

expected the "with pattern" keyword to complete the pattern matching expression

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION MATCH TRUE WITH ALT CONSTRUCTOR COLON YEAR
##
## Ends in an error in state: 200.
##
## match_arm -> constructor_binding COLON . logical_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
##
## The known suffix of the stack is as follows:
## constructor_binding COLON
##

expected a correct expression for this match arm

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION MATCH TRUE WITH ALT CONSTRUCTOR XOR
##
## Ends in an error in state: 199.
##
## match_arm -> constructor_binding . COLON logical_expression [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ALT ]
##
## The known suffix of the stack is as follows:
## constructor_binding
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production option(preceded(DOT,constructor)) ->
## In state 74, spurious reduction of production maybe_qualified_constructor -> constructor option(preceded(DOT,constructor))
## In state 67, spurious reduction of production optional_binding ->
## In state 76, spurious reduction of production constructor_binding -> maybe_qualified_constructor optional_binding
##

expected a constructor payload binding or a colon

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION MATCH TRUE WITH ALT YEAR
##
## Ends in an error in state: 193.
##
## match_arms -> ALT . match_arm match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## ALT
##

expected the name of the constructor for the enum case in the pattern matching

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION MATCH TRUE WITH YEAR
##
## Ends in an error in state: 192.
##
## let_expression -> MATCH primitive_expression WITH . match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## MATCH primitive_expression WITH
##

expected a pattern matching case

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION MATCH YEAR
##
## Ends in an error in state: 43.
##
## let_expression -> MATCH . primitive_expression WITH match_arms [ THEN SEMICOLON SCOPE RULE RSQUARE RPAREN LABEL IN EXCEPTION END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION ]
##
## The known suffix of the stack is as follows:
## MATCH
##

expected an expression to match with

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION SUM YEAR
##
## Ends in an error in state: 15.
##
## base_expression -> SUM . typ_base OF base_expression [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## SUM
##

expected the "for" keyword to spell the aggregation

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE ASSERTION
##
## Ends in an error in state: 218.
##
## code_item -> SCOPE constructor option(scope_use_condition) . COLON nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## SCOPE constructor option(scope_use_condition)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
## In state 140, spurious reduction of production sum_expression -> mult_expression
## In state 123, spurious reduction of production compare_expression -> sum_expression
## In state 161, spurious reduction of production logical_atom -> compare_expression
## In state 156, spurious reduction of production logical_or_expression -> logical_atom
## In state 152, spurious reduction of production logical_expression -> logical_or_expression
## In state 162, spurious reduction of production let_expression -> logical_expression
## In state 172, spurious reduction of production expression -> let_expression
## In state 216, spurious reduction of production scope_use_condition -> UNDER_CONDITION expression
## In state 217, spurious reduction of production option(scope_use_condition) -> scope_use_condition
##

expected a colon after the scope use precondition

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE DOT CONSTRUCTOR DOT YEAR
##
## Ends in an error in state: 103.
##
## small_expression -> small_expression DOT option(terminated(constructor,DOT)) . ident [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## small_expression DOT option(terminated(constructor,DOT))
##

expected the rest of the path after the dot

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE DOT CONSTRUCTOR YEAR
##
## Ends in an error in state: 105.
##
## option(terminated(constructor,DOT)) -> constructor . DOT [ IDENT ]
##
## The known suffix of the stack is as follows:
## constructor
##

expected the rest of the path after a dot

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE DOT YEAR
##
## Ends in an error in state: 102.
##
## small_expression -> small_expression DOT . option(terminated(constructor,DOT)) ident [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## small_expression DOT
##

expected the name of the struct field of the expression before


source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE INCREASING
##
## Ends in an error in state: 140.
##
## mult_expression -> mult_expression . mult_op unop_expression [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## sum_expression -> mult_expression . [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MINUS LESSER_EQUAL LESSER LABEL IS IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DEFINITION DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## mult_expression
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 63, spurious reduction of production primitive_expression -> small_expression
## In state 65, spurious reduction of production base_expression -> primitive_expression
## In state 122, spurious reduction of production unop_expression -> base_expression
## In state 59, spurious reduction of production mult_expression -> unop_expression
##

expected an operator to compose the expression on the left

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE WITH CONSTRUCTOR CONSTRUCTOR
##
## Ends in an error in state: 67.
##
## constructor_binding -> maybe_qualified_constructor . optional_binding [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## maybe_qualified_constructor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production option(preceded(DOT,constructor)) ->
## In state 74, spurious reduction of production maybe_qualified_constructor -> constructor option(preceded(DOT,constructor))
##

a enum constructor pattern should be followed by a payload

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE WITH CONSTRUCTOR OF CONSTRUCTOR XOR
##
## Ends in an error in state: 69.
##
## optional_binding -> OF maybe_qualified_constructor . constructor_binding [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## OF maybe_qualified_constructor
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 71, spurious reduction of production option(preceded(DOT,constructor)) ->
## In state 74, spurious reduction of production maybe_qualified_constructor -> constructor option(preceded(DOT,constructor))
##

unexpected expression following a function application with an enum constructor name

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE WITH CONSTRUCTOR OF YEAR
##
## Ends in an error in state: 68.
##
## optional_binding -> OF . ident [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## optional_binding -> OF . maybe_qualified_constructor constructor_binding [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## OF
##

expecting an expression to stand in as the function argument

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE WITH CONSTRUCTOR YEAR
##
## Ends in an error in state: 71.
##
## maybe_qualified_constructor -> constructor . option(preceded(DOT,constructor)) [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSTRUCTOR CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## constructor
##

the expression before ended, what follows next should be an operator or the rest of the code structure

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION TRUE YEAR
##
## Ends in an error in state: 63.
##
## base_expression -> small_expression . OF base_expression [ XOR WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONSEQUENCE COLON ASSERTION AND ALT ]
## primitive_expression -> small_expression . [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
## small_expression -> small_expression . DOT option(terminated(constructor,DOT)) ident [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## small_expression
##

expected the function application operator

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION VERTICAL YEAR
##
## Ends in an error in state: 11.
##
## literal -> VERTICAL . DATE_LITERAL VERTICAL [ XOR WITH WE_HAVE THEN SUCH SEMICOLON SCOPE RULE RSQUARE RPAREN RBRACKET PLUSPLUS PLUS OR OF NOT_EQUAL MULT MINUS LESSER_EQUAL LESSER LABEL IS INCREASING IN GREATER_EQUAL GREATER FOR EXCEPTION EQUAL END_CODE ELSE DOT DIV DEFINITION DECREASING DECLARATION CONTAINS CONSEQUENCE COLON ASSERTION AND ALT ]
##
## The known suffix of the stack is as follows:
## VERTICAL
##

expected the year for this date literal

source_file: BEGIN_CODE SCOPE CONSTRUCTOR UNDER_CONDITION YEAR
##
## Ends in an error in state: 10.
##
## scope_use_condition -> UNDER_CONDITION . expression [ COLON ]
##
## The known suffix of the stack is as follows:
## UNDER_CONDITION
##

expected an expression

source_file: BEGIN_CODE SCOPE CONSTRUCTOR YEAR
##
## Ends in an error in state: 9.
##
## code_item -> SCOPE constructor . option(scope_use_condition) COLON nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## SCOPE constructor
##

expected a scope use condition or the content of this scope use

source_file: BEGIN_CODE SCOPE YEAR
##
## Ends in an error in state: 7.
##
## code_item -> SCOPE . constructor option(scope_use_condition) COLON nonempty_list(scope_item) [ SCOPE END_CODE DECLARATION ]
##
## The known suffix of the stack is as follows:
## SCOPE
##

expected the name of the scope being used

source_file: BEGIN_CODE YEAR
##
## Ends in an error in state: 361.
##
## source_file_item -> BEGIN_CODE . code END_CODE [ LAW_TEXT LAW_HEADING EOF BEGIN_METADATA BEGIN_DIRECTIVE BEGIN_CODE ]
##
## The known suffix of the stack is as follows:
## BEGIN_CODE
##

expected some declaration or scope use inside this code block






source_file: LAW_TEXT YEAR
##
## Ends in an error in state: 1.
##
## nonempty_list(LAW_TEXT) -> LAW_TEXT . [ SCOPE LAW_TEXT LAW_HEADING EOF END_CODE DECLARATION BEGIN_METADATA BEGIN_DIRECTIVE BEGIN_CODE ]
## nonempty_list(LAW_TEXT) -> LAW_TEXT . nonempty_list(LAW_TEXT) [ SCOPE LAW_TEXT LAW_HEADING EOF END_CODE DECLARATION BEGIN_METADATA BEGIN_DIRECTIVE BEGIN_CODE ]
##
## The known suffix of the stack is as follows:
## LAW_TEXT
##

expected some law text or code block

source_file: YEAR
##
## Ends in an error in state: 0.
##
## source_file' -> . source_file [ # ]
##
## The known suffix of the stack is as follows:
##
##

expected some law text or code block
