(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]

type s = {
  id: integer;
  income: money;
}



type a_out = {
  x_out: s array;
}



type a_in = {
  x_in: unit -> (s array);
}



type b_out = {
  argmax_out: s;
  argmin_out: s;
}



type b_in = unit





let a =
  fun (a_in: a_in) -> let x_ : unit -> (s array) = (a_in.x_in)
    in
    let x_ : s array =
      ((try
          (handle_default ([|(fun (_: _) -> x_ ())|]) (fun (_: _) -> true)
             (fun (_: _) ->
                handle_default
                  ([|(fun (_: _) ->
                        handle_default ([||]) (fun (_: _) -> true)
                          (fun (_: _) ->
                             handle_default
                               ([|(fun (_: _) ->
                                     handle_default ([||])
                                       (fun (_: _) -> true)
                                       (fun (_: _) ->
                                          [|{id = (integer_of_string "0");
                                               income =
                                                 (money_of_cents_string "0")};
                                            {id = (integer_of_string "1");
                                               income =
                                                 ((money_of_cents_string
                                                    "400") +$
                                                    (money_of_cents_string
                                                    "500"))};
                                            {id = (integer_of_string "2");
                                               income =
                                                 ((money_of_cents_string
                                                    "800") *$
                                                    (decimal_of_string "0.65"))}|]))|])
                               (fun (_: _) -> false)
                               (fun (_: _) -> raise EmptyError)))|])
                  (fun (_: _) -> true)
                  (fun (_: _) ->
                     handle_default
                       ([|(fun (_: _) ->
                             handle_default ([||]) (fun (_: _) -> false)
                               (fun (_: _) -> raise EmptyError))|])
                       (fun (_: _) -> false) (fun (_: _) -> raise EmptyError))))
          with EmptyError -> (raise (NoValueProvided
          {filename = "tests/test_array/good/aggregation_2.catala_en";
            start_line=9; start_column=19; end_line=9; end_column=20;
            law_headings=["Article"]})))) in
    {x_out = x_}

let b =
  fun (b_in: b_in) ->
    let a_dot_x_ : unit -> (s array) = (fun (_: unit) -> (raise EmptyError))
    in
    let result_ : a_out = (((a) {x_in = a_dot_x_}))
    in
    let a_dot_x_ : s array = (result_.x_out)
    in
    let argmin_ : s =
      ((try
          (handle_default
             ([|(fun (_: _) ->
                   handle_default ([||]) (fun (_: _) -> true)
                     (fun (_: _) ->
                        handle_default
                          ([|(fun (_: _) ->
                                handle_default ([||]) (fun (_: _) -> true)
                                  (fun (_: _) ->
                                     let predicate_ : _ =
                                       (fun (m_: _) ->
                                          (m_.income) +$
                                            (money_of_cents_string "500"))
                                     in
                                     (Array.fold_left
                                        (fun (acc_: _) (item_: _) ->
                                            if
                                             ((predicate_ acc_) <$
                                                (predicate_ item_)) then 
                                             acc_ else item_)
                                        {id = (~-! (integer_of_string "1"));
                                           income = (money_of_cents_string
                                             "2000")} a_dot_x_)))|])
                          (fun (_: _) -> false)
                          (fun (_: _) -> raise EmptyError)))|])
             (fun (_: _) -> true)
             (fun (_: _) ->
                handle_default
                  ([|(fun (_: _) ->
                        handle_default ([||]) (fun (_: _) -> false)
                          (fun (_: _) -> raise EmptyError))|])
                  (fun (_: _) -> false) (fun (_: _) -> raise EmptyError)))
          with EmptyError -> (raise (NoValueProvided
          {filename = "tests/test_array/good/aggregation_2.catala_en";
            start_line=21; start_column=11; end_line=21; end_column=17;
            law_headings=["Article"]}))))
    in
    let argmax_ : s =
      ((try
          (handle_default
             ([|(fun (_: _) ->
                   handle_default ([||]) (fun (_: _) -> true)
                     (fun (_: _) ->
                        handle_default
                          ([|(fun (_: _) ->
                                handle_default ([||]) (fun (_: _) -> true)
                                  (fun (_: _) ->
                                     let predicate_ : _ =
                                       (fun (m_: _) ->
                                          (m_.income) *$
                                            (decimal_of_string "2."))
                                     in
                                     (Array.fold_left
                                        (fun (acc_: _) (item_: _) ->
                                            if
                                             ((predicate_ acc_) >$
                                                (predicate_ item_)) then 
                                             acc_ else item_)
                                        {id = (~-! (integer_of_string "1"));
                                           income = (money_of_cents_string
                                             "0")} a_dot_x_)))|])
                          (fun (_: _) -> false)
                          (fun (_: _) -> raise EmptyError)))|])
             (fun (_: _) -> true)
             (fun (_: _) ->
                handle_default
                  ([|(fun (_: _) ->
                        handle_default ([||]) (fun (_: _) -> false)
                          (fun (_: _) -> raise EmptyError))|])
                  (fun (_: _) -> false) (fun (_: _) -> raise EmptyError)))
          with EmptyError -> (raise (NoValueProvided
          {filename = "tests/test_array/good/aggregation_2.catala_en";
            start_line=20; start_column=11; end_line=20; end_column=17;
            law_headings=["Article"]}))))
    in
    {argmax_out = argmax_; argmin_out = argmin_}