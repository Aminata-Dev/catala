# This file has been generated by the Catala compiler, do not edit!

from .catala import *
from typing import Any, List, Callable, Tuple
from enum import Enum

class S:
	def __init__(self, id: Integer, income: Money) -> None:
		self.id = id
		self.income = income

	def __eq__(self, other: object) -> bool:
		if isinstance(other, S):
			return (self.id == other.id and self.income == other.income)
		else:
			return False

	def __ne__(self, other: object) -> bool:
		return not (self == other)

	def __str__(self) -> str:
		return "S(id={},income={})".format(self.id, self.income)

class AOut:
	def __init__(self, x_out: List[S]) -> None:
		self.x_out = x_out

	def __eq__(self, other: object) -> bool:
		if isinstance(other, AOut):
			return (self.x_out == other.x_out)
		else:
			return False

	def __ne__(self, other: object) -> bool:
		return not (self == other)

	def __str__(self) -> str:
		return "AOut(x_out={})".format(self.x_out)

class AIn:
	def __init__(self, x_in: Callable[[Unit], (List[S])]) -> None:
		self.x_in = x_in

	def __eq__(self, other: object) -> bool:
		if isinstance(other, AIn):
			return (self.x_in == other.x_in)
		else:
			return False

	def __ne__(self, other: object) -> bool:
		return not (self == other)

	def __str__(self) -> str:
		return "AIn(x_in={})".format(self.x_in)

class BOut:
	def __init__(self, argmax_out: S, argmin_out: S) -> None:
		self.argmax_out = argmax_out
		self.argmin_out = argmin_out

	def __eq__(self, other: object) -> bool:
		if isinstance(other, BOut):
			return (self.argmax_out == other.argmax_out and
          self.argmin_out == other.argmin_out)
		else:
			return False

	def __ne__(self, other: object) -> bool:
		return not (self == other)

	def __str__(self) -> str:
		return "BOut(argmax_out={},argmin_out={})".format(self.argmax_out,
      self.argmin_out)

class BIn:
	def __init__(self, ) -> None:
		pass

	def __eq__(self, other: object) -> bool:
		if isinstance(other, BIn):
			return (True)
		else:
			return False

	def __ne__(self, other: object) -> bool:
		return not (self == other)

	def __str__(self) -> str:
		return "BIn()".format()



def a(a_in_1:AIn):
    x_2 = a_in_1.x_in
    try:
        def local_var_5(_:Any):
            return x_2(Unit())
        def local_var_7(_:Any):
            return True
        def local_var_9(_:Any):
            def local_var_11(_:Any):
                def local_var_13(_:Any):
                    return True
                def local_var_15(_:Any):
                    def local_var_17(_:Any):
                        def local_var_19(_:Any):
                            return True
                        def local_var_21(_:Any):
                            return [S(id = integer_of_string("0"),
                                income = money_of_cents_string("0")),
                                S(id = integer_of_string("1"),
                                income = (money_of_cents_string("400") +
                                money_of_cents_string("500"))),
                                S(id = integer_of_string("2"),
                                income = (money_of_cents_string("800") *
                                decimal_of_string("0.65")))]
                        return handle_default([], local_var_19, local_var_21)
                    def local_var_23(_:Any):
                        return False
                    def local_var_25(_:Any):
                        raise EmptyError
                    return handle_default([local_var_17], local_var_23,
                        local_var_25)
                return handle_default([], local_var_13, local_var_15)
            def local_var_27(_:Any):
                return True
            def local_var_29(_:Any):
                def local_var_31(_:Any):
                    def local_var_33(_:Any):
                        return False
                    def local_var_35(_:Any):
                        raise EmptyError
                    return handle_default([], local_var_33, local_var_35)
                def local_var_37(_:Any):
                    return False
                def local_var_39(_:Any):
                    raise EmptyError
                return handle_default([local_var_31], local_var_37,
                    local_var_39)
            return handle_default([local_var_11], local_var_27, local_var_29)
        local_var_4 = handle_default([local_var_5], local_var_7, local_var_9)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="tests/test_array/good/aggregation_2.catala_en",
            start_line=9, start_column=19, end_line=9, end_column=20,
            law_headings=["Article"]))
    x_3 = local_var_4
    return AOut(x_out = x_3)

def b(b_in_41:BIn):
    def local_var_43(_:Unit):
        raise EmptyError
    a_dot_x_42 = local_var_43
    result_46 = a(AIn(x_in = a_dot_x_42))
    a_dot_x_47 = result_46.x_out
    try:
        def local_var_50(_:Any):
            def local_var_52(_:Any):
                return True
            def local_var_54(_:Any):
                def local_var_56(_:Any):
                    def local_var_58(_:Any):
                        return True
                    def local_var_60(_:Any):
                        def local_var_63(m_64:Any):
                            return (m_64.income +
                                money_of_cents_string("500"))
                        predicate_62 = local_var_63
                        def local_var_65(acc_66:Any, item_67:Any):
                            if (predicate_62(acc_66) <
                                predicate_62(item_67)):
                                return acc_66
                            else:
                                return item_67
                        return list_fold_left(local_var_65,
                            S(id = - integer_of_string("1"),
                            income = money_of_cents_string("2000")),
                            a_dot_x_47)
                    return handle_default([], local_var_58, local_var_60)
                def local_var_68(_:Any):
                    return False
                def local_var_70(_:Any):
                    raise EmptyError
                return handle_default([local_var_56], local_var_68,
                    local_var_70)
            return handle_default([], local_var_52, local_var_54)
        def local_var_72(_:Any):
            return True
        def local_var_74(_:Any):
            def local_var_76(_:Any):
                def local_var_78(_:Any):
                    return False
                def local_var_80(_:Any):
                    raise EmptyError
                return handle_default([], local_var_78, local_var_80)
            def local_var_82(_:Any):
                return False
            def local_var_84(_:Any):
                raise EmptyError
            return handle_default([local_var_76], local_var_82, local_var_84)
        local_var_49 = handle_default([local_var_50], local_var_72,
            local_var_74)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="tests/test_array/good/aggregation_2.catala_en",
            start_line=21, start_column=11, end_line=21, end_column=17,
            law_headings=["Article"]))
    argmin_48 = local_var_49
    try:
        def local_var_88(_:Any):
            def local_var_90(_:Any):
                return True
            def local_var_92(_:Any):
                def local_var_94(_:Any):
                    def local_var_96(_:Any):
                        return True
                    def local_var_98(_:Any):
                        def local_var_101(m_102:Any):
                            return (m_102.income * decimal_of_string("2."))
                        predicate_100 = local_var_101
                        def local_var_103(acc_104:Any, item_105:Any):
                            if (predicate_100(acc_104) >
                                predicate_100(item_105)):
                                return acc_104
                            else:
                                return item_105
                        return list_fold_left(local_var_103,
                            S(id = - integer_of_string("1"),
                            income = money_of_cents_string("0")), a_dot_x_47)
                    return handle_default([], local_var_96, local_var_98)
                def local_var_106(_:Any):
                    return False
                def local_var_108(_:Any):
                    raise EmptyError
                return handle_default([local_var_94], local_var_106,
                    local_var_108)
            return handle_default([], local_var_90, local_var_92)
        def local_var_110(_:Any):
            return True
        def local_var_112(_:Any):
            def local_var_114(_:Any):
                def local_var_116(_:Any):
                    return False
                def local_var_118(_:Any):
                    raise EmptyError
                return handle_default([], local_var_116, local_var_118)
            def local_var_120(_:Any):
                return False
            def local_var_122(_:Any):
                raise EmptyError
            return handle_default([local_var_114], local_var_120,
                local_var_122)
        local_var_87 = handle_default([local_var_88], local_var_110,
            local_var_112)
    except EmptyError:
        raise NoValueProvided(SourcePosition(filename="tests/test_array/good/aggregation_2.catala_en",
            start_line=20, start_column=11, end_line=20, end_column=17,
            law_headings=["Article"]))
    argmax_86 = local_var_87
    return BOut(argmax_out = argmax_86, argmin_out = argmin_48)