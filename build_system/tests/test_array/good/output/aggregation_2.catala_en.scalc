let A (A_in : A_in{"x_in": unit → array S{"id": integer; "income": money}})
  =
  decl x : unit → array S{"id": integer; "income": money};
  x = A_in_1."x_in";
  decl x : array S{"id": integer; "income": money};
  try:
    decl local_var : any;
    let local_var (_ : any) =
      return x_2 ();
    let local_var (_ : any) =
      return true;
    decl local_var : any;
    let local_var (_ : any) =
      decl local_var : any;
      let local_var (_ : any) =
        let local_var (_ : any) =
          return true;
        decl local_var : any;
        let local_var (_ : any) =
          decl local_var : any;
          let local_var (_ : any) =
            let local_var (_ : any) =
              return true;
            decl local_var : any;
            let local_var (_ : any) =
              return [S {"id": 0, "income": $0.00};
                       S {"id": 1, "income": $4.00 +$ $5.00};
                       S {"id": 2, "income": $8.00 *$ 0.65}];
            decl local_var : any;
            return handle_default [] local_var_19 local_var_21;
          let local_var (_ : any) =
            return false;
          decl local_var : any;
          let local_var (_ : any) =
            raise EmptyError;
          decl local_var : any;
          return handle_default [local_var_17] local_var_23 local_var_25;
        decl local_var : any;
        return handle_default [] local_var_13 local_var_15;
      let local_var (_ : any) =
        return true;
      decl local_var : any;
      let local_var (_ : any) =
        decl local_var : any;
        let local_var (_ : any) =
          let local_var (_ : any) =
            return false;
          decl local_var : any;
          let local_var (_ : any) =
            raise EmptyError;
          decl local_var : any;
          return handle_default [] local_var_33 local_var_35;
        let local_var (_ : any) =
          return false;
        decl local_var : any;
        let local_var (_ : any) =
          raise EmptyError;
        decl local_var : any;
        return handle_default [local_var_31] local_var_37 local_var_39;
      decl local_var : any;
      return handle_default [local_var_11] local_var_27 local_var_29;
    decl local_var : any;
    local_var = handle_default [local_var_5] local_var_7 local_var_9
  with EmptyError:
    raise NoValueProvided;
  decl local_var : any;
  x = local_var_4;
  return A_out {"x_out": x_3}

let B (B_in : B_in{}) =
  decl a.x : unit → array S{"id": integer; "income": money};
  decl local_var : any;
  let local_var (_ : unit) =
    raise EmptyError;
    decl local_var : any;
  a.x = local_var_43;
  decl result : A_out{"x_out": array S{"id": integer; "income": money}};
  result = A A_in {"x_in": a.x_42};
  decl a.x : array S{"id": integer; "income": money};
  a.x = result_46."x_out";
  decl argmin : S{"id": integer; "income": money};
  try:
    decl local_var : any;
    let local_var (_ : any) =
      let local_var (_ : any) =
        return true;
      decl local_var : any;
      let local_var (_ : any) =
        decl local_var : any;
        let local_var (_ : any) =
          let local_var (_ : any) =
            return true;
          decl local_var : any;
          let local_var (_ : any) =
            decl predicate : any;
            decl local_var : any;
            let local_var (m : any) =
              return m_64."income" +$ $5.00;
            predicate = local_var_63;
            let local_var (acc : any) (item : any) =
              if predicate_62 acc_66 <$ predicate_62 item_67:
                return acc_66
                else:
                  return item_67;
            decl local_var : any;
            return fold local_var_65 S {"id": - 1, "income": $20.00} a.x_47;
          decl local_var : any;
          return handle_default [] local_var_58 local_var_60;
        let local_var (_ : any) =
          return false;
        decl local_var : any;
        let local_var (_ : any) =
          raise EmptyError;
        decl local_var : any;
        return handle_default [local_var_56] local_var_68 local_var_70;
      decl local_var : any;
      return handle_default [] local_var_52 local_var_54;
    let local_var (_ : any) =
      return true;
    decl local_var : any;
    let local_var (_ : any) =
      decl local_var : any;
      let local_var (_ : any) =
        let local_var (_ : any) =
          return false;
        decl local_var : any;
        let local_var (_ : any) =
          raise EmptyError;
        decl local_var : any;
        return handle_default [] local_var_78 local_var_80;
      let local_var (_ : any) =
        return false;
      decl local_var : any;
      let local_var (_ : any) =
        raise EmptyError;
      decl local_var : any;
      return handle_default [local_var_76] local_var_82 local_var_84;
    decl local_var : any;
    local_var = handle_default [local_var_50] local_var_72 local_var_74
  with EmptyError:
    raise NoValueProvided;
  decl local_var : any;
  argmin = local_var_49;
  decl argmax : S{"id": integer; "income": money};
  try:
    decl local_var : any;
    let local_var (_ : any) =
      let local_var (_ : any) =
        return true;
      decl local_var : any;
      let local_var (_ : any) =
        decl local_var : any;
        let local_var (_ : any) =
          let local_var (_ : any) =
            return true;
          decl local_var : any;
          let local_var (_ : any) =
            decl predicate : any;
            decl local_var : any;
            let local_var (m : any) =
              return m_102."income" *$ 2.;
            predicate = local_var_101;
            let local_var (acc : any) (item : any) =
              if predicate_100 acc_104 >$ predicate_100 item_105:
                return acc_104
                else:
                  return item_105;
            decl local_var : any;
            return fold local_var_103 S {"id": - 1, "income": $0.00} a.x_47;
          decl local_var : any;
          return handle_default [] local_var_96 local_var_98;
        let local_var (_ : any) =
          return false;
        decl local_var : any;
        let local_var (_ : any) =
          raise EmptyError;
        decl local_var : any;
        return handle_default [local_var_94] local_var_106 local_var_108;
      decl local_var : any;
      return handle_default [] local_var_90 local_var_92;
    let local_var (_ : any) =
      return true;
    decl local_var : any;
    let local_var (_ : any) =
      decl local_var : any;
      let local_var (_ : any) =
        let local_var (_ : any) =
          return false;
        decl local_var : any;
        let local_var (_ : any) =
          raise EmptyError;
        decl local_var : any;
        return handle_default [] local_var_116 local_var_118;
      let local_var (_ : any) =
        return false;
      decl local_var : any;
      let local_var (_ : any) =
        raise EmptyError;
      decl local_var : any;
      return handle_default [local_var_114] local_var_120 local_var_122;
    decl local_var : any;
    local_var = handle_default [local_var_88] local_var_110 local_var_112
  with EmptyError:
    raise NoValueProvided;
  decl local_var : any;
  argmax = local_var_87;
  return B_out {"argmax_out": argmax_86, "argmin_out": argmin_48}
