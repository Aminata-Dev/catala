## Article

```catala
declaration scope TestBool:
  context output foo content boolean
  context output bar content integer

scope TestBool:
  definition bar equals 1
  definition foo under condition bar >= 0 consequence equals true
  definition foo under condition bar < 0 consequence equals false
```

```catala-test-inline
$ catala Dcalc 
let TestBool : TestBool_in → TestBool =
  λ (TestBool_in: TestBool_in) →
    let foo : unit → bool = TestBool_in."foo_in" in
    let bar : unit → integer = TestBool_in."bar_in" in
    let bar1 : integer = error_empty ⟨ bar () | true ⊢ 1 ⟩ in
    let foo1 : bool =
      error_empty
        ⟨ foo ()
        | true
          ⊢ ⟨ ⟨bar1 >=! 0 ⊢ true⟩, ⟨bar1 <! 0 ⊢ false⟩
              | false ⊢ ∅ ⟩ ⟩
    in
    { "foo" = foo1; "bar" = bar1}_TestBool
in
TestBool
```

```catala-test-inline
$ catala Interpret -s TestBool
[RESULT] Computation successful! Results:
[RESULT] bar = 1
[RESULT] foo = true
```

```catala-test-inline
$ catala Scopelang 
struct TestBool = {
  foo: bool
  bar: integer
}

let scope TestBool (foo: bool|context|output) (bar: integer|context|output) =
  let bar : integer = reentrant or by default 1;
  let foo : bool = reentrant or by default
    ⟨ ⟨bar >=! 0 ⊢ true⟩, ⟨bar <! 0 ⊢ false⟩
    | false ⊢ ∅ ⟩
```
