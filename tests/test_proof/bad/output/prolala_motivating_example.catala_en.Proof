[ERROR] [Amount.amount] This variable might return an empty error:
  --> tests/test_proof/bad/prolala_motivating_example.catala_en
   | 
58 |   context amount content integer
   |           ^^^^^^
   + ProLaLa 2022 Super Cash Bonus
   +-+ Amount
The solver generated the following counterexample to explain the faulty behavior:
--> eligibility.is_eligible : false
--> number_of_advisors : 4
[RESULT] [Amount.amount] No two exceptions to ever overlap for this variable
[RESULT] [Amount.correct_amount] This variable never returns an empty error
[RESULT] [Amount.correct_amount] No two exceptions to ever overlap for this variable
[RESULT] [Amount.eligibility.is_professor] No two exceptions to ever overlap for this variable
[RESULT] [Amount.eligibility.is_student] No two exceptions to ever overlap for this variable
[RESULT] [Amount.number_of_advisors] This variable never returns an empty error
[RESULT] [Amount.number_of_advisors] No two exceptions to ever overlap for this variable
[RESULT] [Amount.is_professor] This variable never returns an empty error
[RESULT] [Amount.is_professor] No two exceptions to ever overlap for this variable
[RESULT] [Amount.is_student] This variable never returns an empty error
[RESULT] [Amount.is_student] No two exceptions to ever overlap for this variable
[ERROR] [Eligibility.is_eligible] This variable might return an empty error:
 --> tests/test_proof/bad/prolala_motivating_example.catala_en
  | 
9 |   context is_eligible content boolean
  |           ^^^^^^^^^^^
  + ProLaLa 2022 Super Cash Bonus
  +-+ Eligibility
The solver generated the following counterexample to explain the faulty behavior:
--> is_student : false
--> is_professor : false
[ERROR] [Eligibility.is_eligible] At least two exceptions overlap for this variable:
 --> tests/test_proof/bad/prolala_motivating_example.catala_en
  | 
9 |   context is_eligible content boolean
  |           ^^^^^^^^^^^
  + ProLaLa 2022 Super Cash Bonus
  +-+ Eligibility
The solver generated the following counterexample to explain the faulty behavior:
--> is_student : true
--> is_professor : true
[RESULT] [Eligibility.is_eligible_correct] This variable never returns an empty error
[RESULT] [Eligibility.is_eligible_correct] No two exceptions to ever overlap for this variable
[RESULT] [Eligibility.is_professor] This variable never returns an empty error
[RESULT] [Eligibility.is_professor] No two exceptions to ever overlap for this variable
[RESULT] [Eligibility.is_student] This variable never returns an empty error
[RESULT] [Eligibility.is_student] No two exceptions to ever overlap for this variable
