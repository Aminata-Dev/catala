```catala
declaration scope HousingComputation:
  output f content integer depends on integer
  output result content integer

scope HousingComputation:
  definition f of x equals (output of RentComputation).f of x
  definition result equals f of 1

declaration scope RentComputation:
  internal g content integer depends on integer
  output f content integer depends on integer

scope RentComputation:
  definition g of x equals x + 1
  definition f of x equals g of (x + 1)
```

```catala-test-inline
$ catala Interpret -t -s HousingComputation
[LOG] ≔  HousingComputation.f: <function>
[LOG] ☛ Definition applied:
 ┌─⯈ tests/test_scope/good/scope_call3.catala_en:8.13-19:
 └─┐
 8 │   definition result equals f of 1
   │              ‾‾‾‾‾‾

[LOG] →  HousingComputation.f
[LOG]   ≔  HousingComputation.f.input: 1
[LOG]   ☛ Definition applied:
   ┌─⯈ tests/test_scope/good/scope_call3.catala_en:7.13-14:
   └─┐
   7 │   definition f of x equals (output of RentComputation).f of x
     │              ‾
  
[LOG]   →  RentComputation.direct
[LOG]     ≔  RentComputation.direct.input: RentComputation_in {  }
[LOG]     ≔  RentComputation.g: <function>
[LOG]     ≔  RentComputation.f: <function>
[LOG]     ☛ Definition applied:
     ┌─⯈ tests/test_scope/good/scope_call3.catala_en:7.28-53:
     └─┐
     7 │   definition f of x equals (output of RentComputation).f of x
       │                             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    
[LOG]     ≔  RentComputation.direct.output: RentComputation { "f"= λ (param: integer) → RentComputation { "f"= λ (param1: integer) → error_empty ⟨true ⊢ λ (param2: integer) → error_empty ⟨true ⊢ param2 +! 1⟩ param1 +! 1⟩ }."f" param }
[LOG]   ←  RentComputation.direct
[LOG]   →  RentComputation.f
[LOG]     ≔  RentComputation.f.input: 1
[LOG]     ☛ Definition applied:
     ┌─⯈ tests/test_scope/good/scope_call3.catala_en:16.13-14:
     └──┐
     16 │   definition f of x equals g of (x + 1)
        │              ‾
    
[LOG]     →  RentComputation.g
[LOG]       ≔  RentComputation.g.input: 2
[LOG]       ☛ Definition applied:
       ┌─⯈ tests/test_scope/good/scope_call3.catala_en:15.13-14:
       └──┐
       15 │   definition g of x equals x + 1
          │              ‾
      
[LOG]       ≔  RentComputation.g.output: 3
[LOG]     ←  RentComputation.g
[LOG]     ≔  RentComputation.f.output: 3
[LOG]   ←  RentComputation.f
[LOG]   ≔  HousingComputation.f.output: 3
[LOG] ←  HousingComputation.f
[LOG] ≔  HousingComputation.result: 3
[RESULT] Computation successful! Results:
[RESULT] f =
           λ (param: integer) → error_empty
             ⟨true ⊢
               let result : RentComputation {"f": integer → integer} =
                 λ (RentComputation_in: RentComputation_in {}) →
                   let g : integer → integer = error_empty
                     (λ (param1: integer) → error_empty
                        ⟨true ⊢ param1 +! 1⟩) in
                   let f : integer → integer = error_empty
                     (λ (param1: integer) → error_empty
                        ⟨true ⊢ g param1 +! 1⟩) in
                   RentComputation { "f"= f } RentComputation_in {  } in
                 let result1 : RentComputation {"f": integer → integer} =
                   RentComputation { "f"=
                     λ (param1: integer) → result."f" param1 } in
                 if true then result1 else ∅ ."f" param⟩
[RESULT] result = 3
```
