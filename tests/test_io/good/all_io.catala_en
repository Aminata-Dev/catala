## Test

```catala
declaration scope A:
  internal a content integer
  output b content integer
  input c content integer
  input output d content integer
  context e content integer
  context output f content integer


scope A:
  definition a equals 0
  definition b equals a + 1
  definition e equals b + c + d + 1
  definition f equals e + 1
```

```catala-test-inline
$ catala Dcalc -s A
let scope A (A_in: A_in): A =
  let get c : integer = A_in."c_in" in
  let get d : integer = A_in."d_in" in
  let get e : unit → integer = A_in."e_in" in
  let get f : unit → integer = A_in."f_in" in
  let set a : integer =
    error_empty ⟨true ⊢ ⟨ ⟨true ⊢ 0⟩ | false ⊢ ∅ ⟩⟩ in
  let set b : integer =
    error_empty ⟨true ⊢ ⟨ ⟨true ⊢ a +! 1⟩ | false ⊢ ∅ ⟩⟩
    in
  let set e : integer =
    error_empty
      ⟨ e ()
      | true
        ⊢ ⟨true ⊢
              ⟨ ⟨true ⊢ b +! c +! d +! 1⟩ | false ⊢ ∅ ⟩⟩ ⟩
    in
  let set f : integer =
    error_empty
      ⟨ f ()
      | true ⊢ ⟨true ⊢ ⟨ ⟨true ⊢ e +! 1⟩ | false ⊢ ∅ ⟩⟩ ⟩
    in
  return { "b" = b; "d" = d; "f" = f}_A
```

```catala-test-inline
$ catala Typecheck -s A
[RESULT] Typechecking successful!
```
